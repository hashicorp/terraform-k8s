// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	tfe "github.com/hashicorp/go-tfe"
	mock "github.com/stretchr/testify/mock"
)

// Organizations is an autogenerated mock type for the Organizations type
type Organizations struct {
	mock.Mock
}

// Capacity provides a mock function with given fields: ctx, organization
func (_m *Organizations) Capacity(ctx context.Context, organization string) (*tfe.Capacity, error) {
	ret := _m.Called(ctx, organization)

	var r0 *tfe.Capacity
	if rf, ok := ret.Get(0).(func(context.Context, string) *tfe.Capacity); ok {
		r0 = rf(ctx, organization)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Capacity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, options
func (_m *Organizations) Create(ctx context.Context, options tfe.OrganizationCreateOptions) (*tfe.Organization, error) {
	ret := _m.Called(ctx, options)

	var r0 *tfe.Organization
	if rf, ok := ret.Get(0).(func(context.Context, tfe.OrganizationCreateOptions) *tfe.Organization); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, tfe.OrganizationCreateOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, organization
func (_m *Organizations) Delete(ctx context.Context, organization string) error {
	ret := _m.Called(ctx, organization)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, organization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Entitlements provides a mock function with given fields: ctx, organization
func (_m *Organizations) Entitlements(ctx context.Context, organization string) (*tfe.Entitlements, error) {
	ret := _m.Called(ctx, organization)

	var r0 *tfe.Entitlements
	if rf, ok := ret.Get(0).(func(context.Context, string) *tfe.Entitlements); ok {
		r0 = rf(ctx, organization)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Entitlements)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, options
func (_m *Organizations) List(ctx context.Context, options tfe.OrganizationListOptions) (*tfe.OrganizationList, error) {
	ret := _m.Called(ctx, options)

	var r0 *tfe.OrganizationList
	if rf, ok := ret.Get(0).(func(context.Context, tfe.OrganizationListOptions) *tfe.OrganizationList); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.OrganizationList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, tfe.OrganizationListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, organization
func (_m *Organizations) Read(ctx context.Context, organization string) (*tfe.Organization, error) {
	ret := _m.Called(ctx, organization)

	var r0 *tfe.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string) *tfe.Organization); ok {
		r0 = rf(ctx, organization)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunQueue provides a mock function with given fields: ctx, organization, options
func (_m *Organizations) RunQueue(ctx context.Context, organization string, options tfe.RunQueueOptions) (*tfe.RunQueue, error) {
	ret := _m.Called(ctx, organization, options)

	var r0 *tfe.RunQueue
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.RunQueueOptions) *tfe.RunQueue); ok {
		r0 = rf(ctx, organization, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.RunQueue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, tfe.RunQueueOptions) error); ok {
		r1 = rf(ctx, organization, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, organization, options
func (_m *Organizations) Update(ctx context.Context, organization string, options tfe.OrganizationUpdateOptions) (*tfe.Organization, error) {
	ret := _m.Called(ctx, organization, options)

	var r0 *tfe.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.OrganizationUpdateOptions) *tfe.Organization); ok {
		r0 = rf(ctx, organization, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, tfe.OrganizationUpdateOptions) error); ok {
		r1 = rf(ctx, organization, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
