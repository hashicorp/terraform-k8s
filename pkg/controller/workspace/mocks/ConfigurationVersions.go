// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	tfe "github.com/hashicorp/go-tfe"
	mock "github.com/stretchr/testify/mock"
)

// ConfigurationVersions is an autogenerated mock type for the ConfigurationVersions type
type ConfigurationVersions struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, workspaceID, options
func (_m *ConfigurationVersions) Create(ctx context.Context, workspaceID string, options tfe.ConfigurationVersionCreateOptions) (*tfe.ConfigurationVersion, error) {
	ret := _m.Called(ctx, workspaceID, options)

	var r0 *tfe.ConfigurationVersion
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.ConfigurationVersionCreateOptions) *tfe.ConfigurationVersion); ok {
		r0 = rf(ctx, workspaceID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.ConfigurationVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, tfe.ConfigurationVersionCreateOptions) error); ok {
		r1 = rf(ctx, workspaceID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, workspaceID, options
func (_m *ConfigurationVersions) List(ctx context.Context, workspaceID string, options tfe.ConfigurationVersionListOptions) (*tfe.ConfigurationVersionList, error) {
	ret := _m.Called(ctx, workspaceID, options)

	var r0 *tfe.ConfigurationVersionList
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.ConfigurationVersionListOptions) *tfe.ConfigurationVersionList); ok {
		r0 = rf(ctx, workspaceID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.ConfigurationVersionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, tfe.ConfigurationVersionListOptions) error); ok {
		r1 = rf(ctx, workspaceID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, cvID
func (_m *ConfigurationVersions) Read(ctx context.Context, cvID string) (*tfe.ConfigurationVersion, error) {
	ret := _m.Called(ctx, cvID)

	var r0 *tfe.ConfigurationVersion
	if rf, ok := ret.Get(0).(func(context.Context, string) *tfe.ConfigurationVersion); ok {
		r0 = rf(ctx, cvID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.ConfigurationVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cvID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, url, path
func (_m *ConfigurationVersions) Upload(ctx context.Context, url string, path string) error {
	ret := _m.Called(ctx, url, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, url, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
