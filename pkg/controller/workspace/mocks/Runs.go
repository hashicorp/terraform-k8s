// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	tfe "github.com/hashicorp/go-tfe"
	mock "github.com/stretchr/testify/mock"
)

// Runs is an autogenerated mock type for the Runs type
type Runs struct {
	mock.Mock
}

// Apply provides a mock function with given fields: ctx, runID, options
func (_m *Runs) Apply(ctx context.Context, runID string, options tfe.RunApplyOptions) error {
	ret := _m.Called(ctx, runID, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.RunApplyOptions) error); ok {
		r0 = rf(ctx, runID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cancel provides a mock function with given fields: ctx, runID, options
func (_m *Runs) Cancel(ctx context.Context, runID string, options tfe.RunCancelOptions) error {
	ret := _m.Called(ctx, runID, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.RunCancelOptions) error); ok {
		r0 = rf(ctx, runID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, options
func (_m *Runs) Create(ctx context.Context, options tfe.RunCreateOptions) (*tfe.Run, error) {
	ret := _m.Called(ctx, options)

	var r0 *tfe.Run
	if rf, ok := ret.Get(0).(func(context.Context, tfe.RunCreateOptions) *tfe.Run); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, tfe.RunCreateOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Discard provides a mock function with given fields: ctx, runID, options
func (_m *Runs) Discard(ctx context.Context, runID string, options tfe.RunDiscardOptions) error {
	ret := _m.Called(ctx, runID, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.RunDiscardOptions) error); ok {
		r0 = rf(ctx, runID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceCancel provides a mock function with given fields: ctx, runID, options
func (_m *Runs) ForceCancel(ctx context.Context, runID string, options tfe.RunForceCancelOptions) error {
	ret := _m.Called(ctx, runID, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.RunForceCancelOptions) error); ok {
		r0 = rf(ctx, runID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, workspaceID, options
func (_m *Runs) List(ctx context.Context, workspaceID string, options tfe.RunListOptions) (*tfe.RunList, error) {
	ret := _m.Called(ctx, workspaceID, options)

	var r0 *tfe.RunList
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.RunListOptions) *tfe.RunList); ok {
		r0 = rf(ctx, workspaceID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.RunList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, tfe.RunListOptions) error); ok {
		r1 = rf(ctx, workspaceID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, runID
func (_m *Runs) Read(ctx context.Context, runID string) (*tfe.Run, error) {
	ret := _m.Called(ctx, runID)

	var r0 *tfe.Run
	if rf, ok := ret.Get(0).(func(context.Context, string) *tfe.Run); ok {
		r0 = rf(ctx, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Run)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
