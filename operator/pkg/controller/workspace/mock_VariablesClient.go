// Code generated by mockery v1.0.0. DO NOT EDIT.

package workspace

import (
	context "context"

	tfe "github.com/hashicorp/go-tfe"
	mock "github.com/stretchr/testify/mock"
)

// MockVariablesClient is an autogenerated mock type for the VariablesClient type
type MockVariablesClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, options
func (_m *MockVariablesClient) Create(ctx context.Context, options tfe.VariableCreateOptions) (*tfe.Variable, error) {
	ret := _m.Called(ctx, options)

	var r0 *tfe.Variable
	if rf, ok := ret.Get(0).(func(context.Context, tfe.VariableCreateOptions) *tfe.Variable); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Variable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, tfe.VariableCreateOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, variableID
func (_m *MockVariablesClient) Delete(ctx context.Context, variableID string) error {
	ret := _m.Called(ctx, variableID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, variableID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, options
func (_m *MockVariablesClient) List(ctx context.Context, options tfe.VariableListOptions) (*tfe.VariableList, error) {
	ret := _m.Called(ctx, options)

	var r0 *tfe.VariableList
	if rf, ok := ret.Get(0).(func(context.Context, tfe.VariableListOptions) *tfe.VariableList); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.VariableList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, tfe.VariableListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, variableID
func (_m *MockVariablesClient) Read(ctx context.Context, variableID string) (*tfe.Variable, error) {
	ret := _m.Called(ctx, variableID)

	var r0 *tfe.Variable
	if rf, ok := ret.Get(0).(func(context.Context, string) *tfe.Variable); ok {
		r0 = rf(ctx, variableID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Variable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, variableID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, variableID, options
func (_m *MockVariablesClient) Update(ctx context.Context, variableID string, options tfe.VariableUpdateOptions) (*tfe.Variable, error) {
	ret := _m.Called(ctx, variableID, options)

	var r0 *tfe.Variable
	if rf, ok := ret.Get(0).(func(context.Context, string, tfe.VariableUpdateOptions) *tfe.Variable); ok {
		r0 = rf(ctx, variableID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Variable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, tfe.VariableUpdateOptions) error); ok {
		r1 = rf(ctx, variableID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
